import numpy as np

def rotation_matrix_z(theta):
    return np.array([
        [np.cos(theta), -np.sin(theta), 0],
        [np.sin(theta), np.cos(theta), 0],
        [0, 0, 1]
    ])

def rotation_matrix_x(theta):
    return np.array([
        [1, 0, 0],
        [0, np.cos(theta), -np.sin(theta)],
        [0, np.sin(theta), np.cos(theta)]
    ])

def orbital_to_inertial(a, e, i, RAAN, omega, nu, mu=398600.4418):
    # Convert angles from degrees to radians
    i = np.radians(i)
    RAAN = np.radians(RAAN)
    omega = np.radians(omega)
    nu = np.radians(nu)
    
    # Calculate orbital parameters
    p = a * (1 - e**2)
    r = p / (1 + e * np.cos(nu))
    
    # Position vector in the orbital plane
    r_orb = np.array([
        r * np.cos(nu),
        r * np.sin(nu),
        0
    ])
    
    # Velocity vector in the orbital plane
    v_orb = np.array([
        -np.sqrt(mu / p) * np.sin(nu),
        np.sqrt(mu / p) * (e + np.cos(nu)),
        0
    ])
    
    # Rotation matrices
    R_z_RAAN = rotation_matrix_z(-RAAN)
    R_x_i = rotation_matrix_x(-i)
    R_z_omega = rotation_matrix_z(-omega)
    
    # Combined rotation matrix
    R = R_z_RAAN @ R_x_i @ R_z_omega
    
    # Transform to inertial frame
    r_inertial = R @ r_orb
    v_inertial = R @ v_orb
    
    return r_inertial, v_inertial

# User inputs
a = float(input("Enter the semi-major axis (in kilometers): "))  # keep in kilometers
e = float(input("Enter the eccentricity: "))
i = float(input("Enter the inclination (in degrees): "))
RAAN = float(input("Enter the Right Ascension of the Ascending Node (in degrees): "))
omega = float(input("Enter the argument of periapsis (in degrees): "))
nu = float(input("Enter the true anomaly (in degrees): "))

# Calculate inertial position and velocity
r_inertial, v_inertial = orbital_to_inertial(a, e, i, RAAN, omega, nu)

# Print results
print(f"Position vector in the inertial frame (in kilometers): {r_inertial}")
print(f"Velocity vector in the inertial frame (in kilometers per second): {v_inertial}")
